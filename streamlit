import streamlit as st 
import cv2 
import numpy as np 
import sqlite3 
import bcrypt 
from ultralytics import YOLO 
import pandas as pd 
# Initialize SQLite database 
conn = sqlite3.connect('users.db') 
c = conn.cursor() 
# Create users table if it doesn't exist c.execute('''CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY, password TEXT)''') 
conn.commit() 
def hash_password(password): 
  return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())  
def verify_password(password, hashed_password): 
  return bcrypt.checkpw(password.encode('utf-8'), hashed_password) 
def signup(username, password):  
  # Check if user already exists 
  c.execute('SELECT * FROM users WHERE username = ?', (username,)) 
  if c.fetchone():                
    return False 
  else: 
    # Hash the password and store the user  
    hashed_password = hash_password(password) c.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username,hashed_password)) 
    conn.commit()  
    return True 
def login(username, password): 
  c.execute('SELECT * FROM users WHERE username = ?', (username,)) 
  user = c.fetchone() 
  if user and verify_password(password, user[1]):  
    return True 
  else: 
    return False 
# Function to setup the background image  
def set_background(image_url):
  st.markdown(f""" <style>.stApp {{background-image: url({image_url}); background-size: cover; background-position: center center; background-repeat: no-repeat; background-attachment: fixed;}} <style> """, unsafe_allow_html=True ) 
  # Set the background image URL 
  background_image_url = 'data:image/jpeg;  
  # Replace with your actual image URL 
  set_background(background_image_url)  
  # Initialize the database connection 
  conn = sqlite3.connect('users.db', check_same_thread=False)  
  c = conn.cursor() 
  # Create the users table if it doesn't exist 
  c.execute('''CREATE TABLE IF NOT EXISTS users(Username TEXT NOT NULL UNIQUE,Password TEXT NOT NULL) ''') 
Conn.commit()
#...(other function definition remain unchanged) 
def add_user(username, password):                                
  hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()) 
try:  
  c.execute('INSERT INTO users(username, password) VALUES (?, ?)', (username, hashed_password))  
conn.commit()  
return True  
except sqlite3.IntegrityError:  
return False  
def check_user(username, password):                                                                                          
  c.execute('SELECT password FROM users 
  WHERE username = ?', (username,)) result = c.fetchone()  
  if result:  
    return  
  bcrypt.checkpw(password.encode('utf-8'), result[0])  
  return False  
def show_signup():  
  st.write("### Sign Up to Brain Tumor Detection using YOLO") 
  new_username = st.text_input("Username", key="new_username")  
  new_password = st.text_input("Password", type="password", key="new_password")  
  if st.button("Sign Up"):
       if new_username and new_password: 
            if add_user(new_username, new_password): 
                st.success("Account created successfully! Please log in.") st.session_state['current_page'] = 'login' 
                st.rerun() 
            else:  
                st.error("Username already exists. Please try a different st.error("Please enter a username and password.")  
def show_login():  
  st.write("### Log In")  
  username =  st.text_input("Username",key="username")  
  password = st.text_input("Username", st.text_input("Password", type="password", key="password")  
  if st.button("Log In"):  
    if check_user(username, password):                              
      st.session_state['logged_in'] = True  
      st.rerun()               
    else: 
      st.error("Wrong credentials or user does not exist.")  
def show_yolo_model():  
  # Load the pre-trained YOLO model  
  model = YOLO('best.pt')  
  # Read the COCO class list from a file  
  with open("coco.txt", "r") as my_file:  
  class_list = my_file.read().split("\n")  
  # Streamlit interface  
  # st.title('Brain Tumor Detection using YOLOv8')  
  # st.write('Upload an image and the model will detect brain tumors.')  
  # Upload image through Streamlit uploaded_file = st.file_uploader("Choose an image...", type="jpg") YOLOv8')  
  # st.write('Upload an image and the model will detect brain tumors.')  
  # Upload image through Streamlit uploaded_file = st.file_uploader("Choose an image...", type="jpg")  
  if uploaded_file is not None:  
    # Read the image  
    frame = cv2.imdecode(np.fromstring(uploaded_file.read(), np.uint8), cv2.IMREAD_COLOR)  
    # Resize the frame to a fixed size (if necessary) 
    frame = cv2.resize(frame, (1020, 500))  
    # Perform object detection on the frame 
    results = model.predict(frame)  
    detections = results[0].boxes.data  
    px = pd.DataFrame(detections).astype("float")  
    # Display the detected objects  
    st.image(frame, channels="BGR", caption="Uploaded Image with Object Detection", use_column_width=True)  
    # Display the detected objects and their class labels tumour_count = 0  
    for index, row in px.iterrows():  
        x1, y1, x2, y2, _, d = map(int, row)  
        c = class_list[d]  
        # Draw bounding boxes and class labels on the frame  
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0,0, 255), 2) cv2.putText(frame, str(c), (x1, y1), 
        cv2.FONT_HERSHEY_COMPLEX, 1.25, (0,255,0), 1)  
        # Check if the detected object is a tumour  
        if c.lower() == "tumour":  
              tumour_count += 1 
        # Display the frame with objects detected  
        st.image(frame, channels="BGR", caption="Detected Objects", use_column_width=True)  
        # Use HTML and CSS to style the text  
        st.markdown(f""" <style> .tumour_count {{ font-size: 24px; color: red; }} </style> </div class=”tumor_count”> Number of Tumour Detections: {tumour_count} """,unsafe_allow_html=True)  
        if _name=='main_':  
            st.title('Brain Tumor Detection using YOLO') 
            auth_status = st.session_state.get('auth_status', None)  
        if auth_status == "logged_in":  
              st.success(f"Welcome {st.session_state.username}!")  
              st.header('Upload an image and the model will detect brain tumors.')  
              show_yolo_model()  
        elif auth_status == "login_failed":  
              st.error("Login failed. Please check your username and password.")  
              auth_status = None  
        elif auth_status == "signup_failed":  
              st.error("Signup failed. Username already exists.")  
              auth_status = None  
              # Login/Signup form  
        if auth_status is None or auth_status == "logged_out":  
        form_type = st.radio("Choose form type:", ["Login", "Signup"])  
        username = st.text_input("Username")  
        password = st.text_input("Password", type="password")  
        if form_type == "Login":  
            if st.button("Login"):  
                if login(username, password):  
                    st.session_state.auth_status = "logged_in"  
                    st.session_state.username = username  
                    st.rerun()  
                 else:  
                    st.session_state.auth_status = "login_failed"  
                    st.rerun()  
            else: # Signup  
               if st.button("Signup"):  
                  if signup(username, password):  
                        st.session_state.auth_status = "logged_in"  
                        st.session_state.username = username  
                        st.rerun()  
                  else:  
                        st.session_state.auth_status = "signup_failed"  
                        st.rerun()  
                        # Logout button  
                  if auth_status == "logged_in":  
                        if st.button("Logout"):  
                              st.session_state.auth_status = "logged_out"  
                              del st.session_state.username  
                              st.rerun()  
# Main app flow  
# if 'current_page' not in st.session_state:  
# st.session_state['current_page'] = 'signup'  
# if 'logged_in' not in st.session_state:  
# st.session_state['logged_in'] = False  
# if st.session_state.get('current_page') == 'signup' and not st.session_state.get('logged_in', False):  
# show_signup()  
# elif st.session_state.get('current_page') == 'login' and not st.session_state.get('logged_in', False):  
# show_login()  
# elif st.session_state.get('logged_in', False):  
# show_yolo_model()  
# if st.button('Logout'): # st.session_state['logged_in'] = False 
